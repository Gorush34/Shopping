<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="shopping">

	<!-- index 화면(임시) -->	
	<resultMap type="HashMap" id="boardList">
		<result property="chg_seq" column="chg_seq" javaType="int" />
		<result property="cust_no" column="cust_no" javaType="String" />
		<result property="chg_aft_cnt" column="chg_aft_cnt" javaType="String" />
	</resultMap>
	
	<select id="getBoardList" resultMap="boardList">
		
		select V.chg_seq, V.cust_no, V.chg_aft_cnt
		from 
		    (
		    select rownum AS rno, chg_seq, cust_no, chg_aft_cnt
		    from SD_CUST01_HT
		    order by chg_seq desc
		    ) V
		where rno between 1 and 5
		
	</select>

	
	<resultMap type="com.spring.shopping.model.ShoppingVO" id="InfoMap">
	    <result property="chg_seq" column="chg_seq" javaType="int" />
		<result property="cust_no" column="cust_no" javaType="String" />
		<result property="chg_aft_cnt" column="chg_aft_cnt" javaType="String" />
  	</resultMap>
  	
  	<!-- 리스트 + 페이징 + 검색 -->
	<select id="getListWithPaging" resultMap="InfoMap" parameterType="com.spring.shopping.common.SearchCriteria">
		select chg_seq, cust_no, chg_aft_cnt
		from
		(
			  SELECT rownum AS rno,
			    chg_seq,
			    cust_no,
			    chg_aft_cnt
			  FROM
			    SD_CUST01_HT 
			  WHERE chg_seq > 0
			    <include refid="search"></include>
			  ORDER BY  
			    chg_seq desc
		) V
		where rno between #{pageStart} and #{endPage}
	</select>
  	
  	<!-- 과제1 시작 -->

  	
	<!-- 로그인 시도를 한 사용자의 정보를 가져오기 -->
	<select id="getLoginMember" parameterType="HashMap" resultType="com.spring.shopping.model.EmpVO">
		SELECT USER_ID                            											/* 사용자ID */
		     , USER_NM                            											/* 사용자명 */
		     , USER_DT_CD                         											/* 사용자구분코드 */
		     , USE_YN                             											/* 사용여부 */
		     , USE_PWD                            											/* 비밀번호 */
		     , ST_DT                              											/* 시작일자 */
		     , NVL(ED_DT, ' ') AS ED_DT           											/* 종료일자 */ 
		     , PRT_CD                             											/* 거래처코드 */
		     , (SELECT PRT_NM FROM MA_PRT_MT B WHERE PRT_CD = A.PRT_CD) AS PRT_NM			/* 거래처명 */
		     , NVL(PWD_UPD_DT, ' ') AS PWD_UPD_DT 											/* 비밀번호변경일자 */
		     , FST_REG_DT                         											/* 최초등록일자 */
		     , FST_USER_ID                        											/* 최초등록자 */
		     , LST_UPD_DT                         											/* 최종수정일자 */
		     , LST_UPD_ID                         											/* 최종수정자 */
		FROM MA_USER_MT A
		WHERE USER_ID = #{USER_ID} AND USE_PWD = #{USE_PWD}
	</select>
  	
  	<resultMap type="HashMap" id="getTotalCountPrtMap">
	   <result property="PRT_CNT" 		column="PRT_CNT" 		javaType="String" />
	</resultMap>
  	
  	
  	<!-- 매장을 조건으로 검색한 결과의 개수 가져오기 -->
  	<select id="getTotalCountPrt" parameterType="HashMap" resultMap="getTotalCountPrtMap">
  	SELECT DISTINCT COUNT(PRT_CD) AS PRT_CNT												/* 중복된 값을 하나로 하는 매장코드의 총 개수를 얻어온다 */
    FROM MA_PRT_MT																			/* 거래처관리 테이블에서 */	 
    WHERE ( 
                PRT_CD LIKE '%' || #{searchWord_prt} || '%'           						/* 매장검색란에 적힌 값과 매장코드가 부분일치 하는 값 */
                OR																			/* 또는 */
                PRT_NM LIKE '%' || #{searchWord_prt} || '%'									/* 매장검색란에 적힌 값과 매장명이 부분일치 하는 값 */	
          )
  	</select>
  	
  	<resultMap type="HashMap" id="getTotalCountCustMap">
    <result property="CUST_CNT" 		column="CUST_CNT" 		javaType="String" />
	</resultMap>
  	
  	
  	<!-- 고객을 조건으로 검색한 결과의 개수 가져오기 -->
  	<select id="getTotalCountCust" parameterType="HashMap" resultMap="getTotalCountCustMap">
  	SELECT COUNT(CUST_NO) AS CUST_CNT														/* 중복된 값을 하나로 하는 고객번호의 총 개수를 얻어온다 */
    FROM CS_CUST01_MT 																		/* 고객관리 테이블에서 */
    WHERE CUST_NO LIKE '%' || #{searchWord_cust} || '%'										/* 고객검색란에 적힌 값과 고객번호가 부분일치 하는 값 */
       OR CUST_NM LIKE '%' || #{searchWord_cust} || '%'										/* 고객검색란에 적힌 값과 고객명이 부분일치 하는 값 */	
  	</select>
  	
  	
  	<!-- 매장검색 결과가 하나인 결과 가져오기 -->
  	<resultMap type="HashMap" id="getResultPrtMap">
	   <result property="PRT_NM" 		column="PRT_NM" 		javaType="String" />
	   <result property="PRT_CD" 		column="PRT_CD" 		javaType="String" />
	</resultMap>

  	<select id="getResultPrt" resultMap="getResultPrtMap" parameterType="HashMap">
		SELECT DISTINCT COUNT(PRT_NM)
		     , PRT_NM                     													/* 매장명 */                              
		     , PRT_CD                     													/* 매장코드 */                                                        
		FROM MA_PRT_MT                                    									/* 거래처관리 테이블에서 */
		WHERE 	( 
					PRT_CD LIKE '%' || #{searchWord_prt} || '%'           					/* 매장검색란에 적힌 값과 매장코드가 부분일치 하는 값 */
					OR																		/* 또는 */
					PRT_NM LIKE '%' || #{searchWord_prt} || '%'								/* 매장검색란에 적힌 값과 매장명이 부분일치 하는 값 */	
				)
		GROUP BY PRT_CD, PRT_NM																/* 매장코드, 매장명 오름차순으로 정렬 */
	</select>
	
	<!-- 고객검색 결과가 하나인 결과 가져오기 -->
  	<resultMap type="HashMap" id="getResultCustMap">
	   <result property="CUST_NO" 		column="CUST_NO" 		javaType="String" />
	   <result property="CUST_NM" 		column="CUST_NM" 		javaType="String" />
	</resultMap>

  	<select id="getResultCust" resultMap="getResultCustMap" parameterType="HashMap">
		SELECT CUST_NO																		/* 고객번호 */
		     , CUST_NM																		/* 고객명 */
		FROM CS_CUST01_MT                                    								/* 고객관리 테이블에서 */	
		WHERE CUST_NO LIKE '%' || #{searchWord_cust} || '%'	                                /* 고객검색란에 적힌 값과 고객번호가 부분일치 하는 값 */
		   OR CUST_NM LIKE '%' || #{searchWord_cust} || '%' 								/* 고객검색란에 적힌 값과 고객명과 부분일치 하는 값 */
		ORDER BY CUST_NO ASC																/* 고객번호 오름차순으로 정렬 */
	</select>
  	
	<!-- 고객조회 목록 가져오기 -->
	<resultMap type="HashMap" id="custListMap">
	   <result property="CUST_NO" 		column="CUST_NO" 		javaType="String" />
	   <result property="CUST_NM" 		column="CUST_NM" 		javaType="String" />
	   <result property="MBL_NO" 		column="MBL_NO" 		javaType="String" />
	   <result property="CUST_SS_CD" 	column="CUST_SS_CD" 	javaType="String" />
	   <result property="JS_DT" 		column="JS_DT" 			javaType="String" />
	   <result property="PRT_NM" 		column="PRT_NM" 		javaType="String" />
	   <result property="USER_NM" 		column="USER_NM" 		javaType="String" />
	   <result property="LST_UPD_DT" 	column="LST_UPD_DT" 	javaType="String" />
	</resultMap>
	<select id="getCustList" resultMap="custListMap" parameterType="HashMap">
		SELECT A.CUST_NO AS CUST_NO                                                         /* 고객번호 */
		     , CASE WHEN LENGTH(A.CUST_NM) = 2 THEN SUBSTR(A.CUST_NM, 1, 1) || '*'          /* 고객명 */
		       ELSE                                                                         /* 2글자면 마지막 글자만 */
		       SUBSTR(A.CUST_NM, 1, 1) ||                                                   /* 3글자이상시 첫,마지막을 제외한 */
		       LPAD('*', LENGTH(A.CUST_NM)-2, '*') ||                                       /* 중간부분을 마스킹처리 */
		       SUBSTR(A.CUST_NM, LENGTH(A.CUST_NM), 1)  END AS CUST_NM    
		     , SUBSTR(A.MBL_NO,1,3) || '-' ||                                               /* 휴대폰번호 */    
		       LPAD('*', LENGTH(A.MBL_NO)-7, '*') || '-' ||                                 /* 중간 번호를 마스킹 처리 */
		       SUBSTR(A.MBL_NO, -4) AS MBL_NO                                                
		     , CASE A.CUST_SS_CD                                                            /* 고객상태코드 */
		       WHEN '10' THEN '정상'                                                         /* 코드가 10이면 정상 */
		       WHEN '80' THEN '중지'                                                         /* 코드가 80이면 중지 */
		       WHEN '90' THEN '해지'                                                         /* 코드가 90이면 해지 */
		       END AS CUST_SS_CD    
		     , TO_CHAR(TO_DATE(A.JS_DT), 'YYYY-MM-DD') AS JS_DT                             /* 가입일자 */
		     , B.PRT_NM AS PRT_NM                                                           /* 가입매장 */
		     , TO_CHAR(TO_DATE(A.FST_REG_DT), 'YYYY-MM-DD') || '/' || C.USER_NM AS USER_NM  /* 등록일자/등록자 */
		     , TO_CHAR(TO_DATE(A.LST_UPD_DT), 'YYYY-MM-DD HH24:MI:SS') AS LST_UPD_DT        /* 수정일자 */
		FROM CS_CUST01_MT A INNER JOIN MA_PRT_MT B                                          /* 고객관리테이블과 거래처관리 테이블 JOIN */
		ON A.JN_PRT_CD = B.PRT_CD                                                           /* 가입매장코드 = 거래처코드 */
		INNER JOIN MA_USER_MT C                                                             /* 고객관리테이블과 사용자 테이블 JOIN */
		ON A.FST_USER_ID = C.USER_ID                                                        /* 등록자아이디 = 사용자아이디 */
		WHERE 1=1
		AND 	(
					TO_DATE(A.JS_DT, 'YYYY-MM-DD') <![CDATA[>=]]> TO_DATE(#{SDATE}, 'YYYY-MM-DD')	/* 가입일자가 시작일자와 */
                    AND 	
                	TO_DATE(A.JS_DT, 'YYYY-MM-DD') <![CDATA[<=]]> TO_DATE(#{EDATE}, 'YYYY-MM-DD')   /* 종료일자 사이 */
				)	
		<if test='PRT_CD_NM != "" '>                                  						/* 매장검색란이 공백이 아니라면(검색조건) */
		AND ( 
				A.JN_PRT_CD LIKE '%' || #{PRT_CD_NM} || '%'           						/* 매장검색란에 적힌 값과 매장코드가 부분일치 하는 값 */
				OR																			/* 또는 */
				B.PRT_NM LIKE '%' || #{PRT_CD_NM} || '%'									/* 매장검색란에 적힌 값과 매장명이 부분일치 하는 값 */	
			)
		</if>
		<if test='IN_CUST_NO != ""'>                                                        /* 고객번호가 기본값이 아니라면 */
		AND A.CUST_NO LIKE '%' || #{IN_CUST_NO} || '%'										/* 고객번호검색란에 적힌 값과 고객번호가 부분일치 하는 값 */
		</if>
		<if test='CUST_SS_CD != ""'>                                                        /* 고객상태코드가 기본값이 아니라면 */
		AND A.CUST_SS_CD = #{CUST_SS_CD}                                                    /* 고객상태코드가 일치하는 값 */
		</if>
		ORDER BY CUST_NO																	/* 고객번호의 오름차순으로 정렬 */
	</select>
	
	<!-- 매장조회 목록 가져오기 -->
	<resultMap type="HashMap" id="prtListMap">
	   <result property="PRT_CD" 		column="PRT_CD" 		javaType="String" />
	   <result property="PRT_NM" 		column="PRT_NM" 		javaType="String" />
	   <result property="PRT_DT_CD" 	column="PRT_DT_CD" 		javaType="String" />
	   <result property="PRT_SS_CD" 	column="PRT_SS_CD" 		javaType="String" />
	</resultMap>
	<select id="getPrtList" resultMap="prtListMap" parameterType="HashMap">
  	SELECT PRT_CD                                   									/* 거래처코드 */
	     , PRT_NM                                   									/* 거래처명 */
	     , PRT_DT_CD                                									/* 거래처구분코드 */
	     , CASE PRT_SS_CD                           									/* 거래처상태코드 */
	       WHEN '10' THEN '정상'                     									/* 코드가 10이면 정상 */
	       WHEN '80' THEN '중지'                     									/* 코드가 80이면 중지 */
	       WHEN '90' THEN '폐쇄'                     									/* 코드가 90이면 폐쇄 */
	       END AS PRT_SS_CD
	FROM MA_PRT_MT                                  									/* 거래처관리 테이블로부터 */
	WHERE PRT_DT_CD = '2'                           									/* 거래처구분코드가 2이면서 */
	  AND ( PRT_CD LIKE '%' || #{searchWord} || '%'             						/* 매장코드와 부분일치하거나 */
	   OR   PRT_NM LIKE '%' || #{searchWord} || '%' )           						/* 또는 매장코드와 부분일치한 데이터들을 */
	ORDER BY PRT_CD ASC                             									/* 거래처코드의 오름차순을 기준으로 가져온다 */
  	</select>

	<!-- 고객조회 목록 가져오기 -->
	<resultMap type="HashMap" id="popUpListMap">
	   <result property="CUST_NO" 		column="CUST_NO" 		javaType="String" />
	   <result property="CUST_NM" 		column="CUST_NM" 		javaType="String" />
	   <result property="MBL_NO" 		column="MBL_NO" 		javaType="String" />
	   <result property="CUST_SS_CD" 	column="CUST_SS_CD" 	javaType="String" />
	</resultMap>
	
	<select id="getPopUpCustList" resultMap="popUpListMap" parameterType="HashMap">
  	SELECT CUST_NO                                               							/* 고객번호 */
	     , CUST_NM                                               							/* 고객명 */
	     , SUBSTR(MBL_NO, 1, 3) || '-' ||
	       SUBSTR(MBL_NO, 4, LENGTH(MBL_NO)-7 ) || '-' ||
	       SUBSTR(MBL_NO, -4) AS MBL_NO                          							/* 휴대폰 번호(-로연결) */
	     , CASE CUST_SS_CD                                       							/* 고객상태코드 */
	       WHEN '10' THEN '정상'                                  							/* 코드가 10이면 정상 */
	       WHEN '80' THEN '중지'                                  							/* 코드가 80이면 중지 */
	       WHEN '90' THEN '해지'                                  							/* 코드가 90이면 해지 */
	       END AS CUST_SS_CD
	FROM CS_CUST01_MT                                           							/* 고객관리 테이블로부터 */
	WHERE 1=1
	<if test=" SEARCHWORD_NM != '' ">														/* 고객이름 입력칸이 비어있지 않으면 */
	AND   CUST_NM LIKE '%' || #{SEARCHWORD_NM} || '%'          								/* 고객번호가 일부포함되거나 */
	</if>
	<if test=' CUST_NO != "" '>																/* 고객번호 입력칸이 비어있지 않으면 */
	AND   CUST_NO LIKE '%' || #{CUST_NO} || '%'                  							/* 고객번호가 일부포함되거나 */
	</if>
	<if test=' SEARCHWORD_MBL != "" '>	   													/* 핸드폰번호 입력칸이 비어있지 않으면 */
	AND    MBL_NO = #{SEARCHWORD_MBL}							 							/* 핸드폰번호가 일치하면 */
	</if>
	ORDER BY CUST_NO ASC																	/* 고객번호의 오름차순으로 정렬 */
  	</select>  	


	<!-- 고객의 정보 가져오기(팝업) -->
	<resultMap type="HashMap" id="custInfoMap">
	   <result property="CUST_NO" 		column="CUST_NO" 		javaType="String" />
	   <result property="CUST_NM" 		column="CUST_NM" 		javaType="String" />
	</resultMap>
	
	<select id="getCustInfoPopUp" resultMap="custInfoMap" parameterType="HashMap">
	SELECT CUST_NO                                                     						/* 고객번호 */
	     , CUST_NM                                                     						/* 고객명 */ 
	FROM CS_CUST01_MT                                            							/* 고객관리 테이블에서 */
	WHERE CUST_NO = #{SEARCHWORD}                                                 			/* 고객번호가 일치하는 것만 */
	</select>
	

	<!-- 고객조회 목록 가져오기 -->
	<resultMap type="HashMap" id="hisListMap">
	   <result property="CHG_DT" 		column="CHG_DT" 		javaType="String" />
	   <result property="CHG_CD" 		column="CHG_CD" 		javaType="String" />
	   <result property="CHG_BF_CNT" 	column="CHG_BF_CNT" 	javaType="String" />
	   <result property="CHG_AFT_CNT" 	column="CHG_AFT_CNT" 	javaType="String" />
	   <result property="LST_UPD_ID" 	column="LST_UPD_ID" 	javaType="String" />
	   <result property="LST_UPD_DT" 	column="LST_UPD_DT" 	javaType="String" />
	</resultMap>
	
	<select id="getPopUpHistoryList" resultMap="hisListMap" parameterType="HashMap">
	SELECT A.CUST_NO AS CUST_NO                                                     		/* 고객번호(추후 삭제고려) */
	     , A.CUST_NM AS CUST_NM                                                     		/* 고객명(추후 삭제고려) */ 
	     , TO_CHAR(TO_DATE(B.CHG_DT), 'YYYY-MM-DD') AS CHG_DT                       		/* 변경일자 */
	     , CASE B.CHG_CD WHEN 'CUST_NM'         THEN '고객명'                        			/* 변경코드가 CUST_NM 이면 '고객명' */
	                     WHEN 'JN_PRT_CD'       THEN '가입매장코드'                   			/* JN_PRT_CD 이면 '가입매장코드' */
	                     WHEN 'EMAIL'           THEN '이메일'                        			/* EMAIL 이면 '이메일' */
	                     WHEN 'SCAL_YN'         THEN '양음력구분'                     			/* SCAL_YN 이면 '양음력구분' */
	                     WHEN 'BRDY_DT'         THEN '생년월일'                       		/* BRDY_DT 이면 '생년월일' */
	                     WHEN 'SEX_CD'          THEN '성별코드'                       		/* SEX_CD 이면 '성별코드' */
	                     WHEN 'MRRG_DT'         THEN '결혼기념일'                     			/* MRRG_DT 이면 '결혼기념일' */
	                     WHEN 'PSMT_GRC_CD'     THEN '우편물수령코드'                  			/* PSMT_GRC_CD 이면 '우편물수령코드' */
	                     WHEN 'ADDR'            THEN '주소'                          		/* ADDR 이면 '주소' */
	                     WHEN 'ADDR_DTL'        THEN '상세주소'                       		/* ADDR_DTL 이면 '상세주소' */
	                     WHEN 'STP_DT'          THEN '중지일자'                       		/* STP_DT 이면 '중지일자' */
	                     WHEN 'POC_CD'          THEN '직업코드'                       		/* POC_CD 이면 '직업코드' */
	                     WHEN 'MBL_NO'          THEN '휴대폰번호'                     			/* MBL_NO 이면 '휴대폰번호' */
	                     WHEN 'CUST_SS_CD'      THEN '고객상태코드'                    		/* CUST_SS_CD 이면 '고객상태코드' */
	                     WHEN 'CNCL_DT'         THEN '해지일자'                       		/* CNCL_DT 이면 '해지일자' */
	                     WHEN 'CNCL_CNTS'       THEN '해지사유내용'                    		/* CNCL_CNTS 이면 '해지사유내용' */
	                     WHEN 'EMAIL_RCV_YN'    THEN '이메일수신동의여부'               			/* EMAIL_RCV_YN 이면 '이메일수신동의여부' */
	                     WHEN 'DM_RCV_YN'       THEN 'DM수신동의여부'                  		/* DM_RCV_YN 이면 'DM수신동의여부' */
	                     WHEN 'SMS_RCV_YN'      THEN 'SMS수신동의여부'                 		/* SMS_RCV_YN 이면 'SMS수신동의여부' */
	                     END AS CHG_CD                                              		/* 변경항목 */
     	 , CASE WHEN B.CHG_BF_CNT = '10' AND B.CHG_CD ='POC_CD' THEN '학생'   				/* 변경 전 내용 시작 */
                WHEN B.CHG_BF_CNT = '20' AND B.CHG_CD ='POC_CD' THEN '회사원'					
                WHEN B.CHG_BF_CNT = '30' AND B.CHG_CD ='POC_CD' THEN '공무원'					/* 변경코드가 POC_CD(직업코드)이고 */
                WHEN B.CHG_BF_CNT = '40' AND B.CHG_CD ='POC_CD' THEN '전문직'					/* 값이 10이면 학생, 20이면 회사원, 30이면 공무원 */
                WHEN B.CHG_BF_CNT = '50' AND B.CHG_CD ='POC_CD' THEN '군인'					/* 값이 40이면 전문직, 50이면 군인, 60이면 주부 */
                WHEN B.CHG_BF_CNT = '60' AND B.CHG_CD ='POC_CD' THEN '주부'					/* 값이 90이면 연예인, 99면 기타 */
                WHEN B.CHG_BF_CNT = '90' AND B.CHG_CD ='POC_CD' THEN '연예인'
                WHEN B.CHG_BF_CNT = '99' AND B.CHG_CD ='POC_CD' THEN '기타'
                
                WHEN B.CHG_BF_CNT = 'H' AND B.CHG_CD ='PSMT_GRC_CD' THEN '자택'				/* 변경코드가 PSMT_GRC_CD(우편물수령코드)이고 */
                WHEN B.CHG_BF_CNT = 'O' AND B.CHG_CD ='PSMT_GRC_CD' THEN '직장'				/* 값이 H면 자택, O면 직장 */
                
                WHEN B.CHG_BF_CNT = '10' AND B.CHG_CD ='CUST_SS_CD' THEN '정상'				/* 변경코드가 CUST_SS_CD(고객상태코드)이고 */
                WHEN B.CHG_BF_CNT = '80' AND B.CHG_CD ='CUST_SS_CD' THEN '중지'				/* 값이 10이면 정상, 80이면 중지, 90이면 해지 */
                WHEN B.CHG_BF_CNT = '90' AND B.CHG_CD ='CUST_SS_CD' THEN '해지'
                
                WHEN B.CHG_BF_CNT = 'M' AND B.CHG_CD ='SEX_CD' THEN '남자'					/* 변경코드가 SEX_CD(성별코드)이고 */
                WHEN B.CHG_BF_CNT = 'F' AND B.CHG_CD ='SEX_CD' THEN '여자'					/* 값이 M이면 남자, F면 여자 */
                
                WHEN B.CHG_BF_CNT = '0' AND B.CHG_CD ='SCAL_YN' THEN '양력'					/* 변경코드가 SCAL_YN(양음력구분)이고 */
                WHEN B.CHG_BF_CNT = '1' AND B.CHG_CD ='SCAL_YN' THEN '음력'					/* 값이 0이면 양력, 1이면 음력 */
                
                WHEN B.CHG_BF_CNT = 'Y' AND B.CHG_CD ='EMAIL_RCV_YN' THEN '동의'				/* 변경코드가 EMAIL_RCV_YN(이메일수신동의여부)이고 */
                WHEN B.CHG_BF_CNT = 'N' AND B.CHG_CD ='EMAIL_RCV_YN' THEN '미동의'			/* 값이 Y면 동의, N이면 미동의 */
                
                WHEN B.CHG_BF_CNT = 'Y' AND B.CHG_CD ='DM_RCV_YN' THEN '동의'				/* 변경코드가 DM_RCV_YN(DM수신동의여부)이고 */
                WHEN B.CHG_BF_CNT = 'N' AND B.CHG_CD ='DM_RCV_YN' THEN '미동의'				/* 값이 Y면 동의, N이면 미동의 */
                
                WHEN B.CHG_BF_CNT = 'Y' AND B.CHG_CD ='SMS_RCV_YN' THEN '동의'				/* 변경코드가 SMS_RCV_YN(SMS수신동의여부)이고 */
                WHEN B.CHG_BF_CNT = 'N' AND B.CHG_CD ='SMS_RCV_YN' THEN '미동의'				/* 값이 Y면 동의, N이면 미동의 */
                
                WHEN B.CHG_BF_CNT = 'Y' AND B.CHG_CD ='TM_RCV_YN' THEN '동의'				/* 변경코드가 TM_RCV_YN(TM수신동의여부)이고 */
                WHEN B.CHG_BF_CNT = 'N' AND B.CHG_CD ='TM_RCV_YN' THEN '미동의'				/* 값이 Y면 동의, N이면 미동의 */
                
                WHEN NOT REGEXP_LIKE(B.CHG_BF_CNT, '[^0-9]') AND LENGTH(B.CHG_BF_CNT) = 8	/* 변경전 내용이 날짜라면(8자리로 이루어진 숫자) */
                THEN TO_CHAR(TO_DATE(B.CHG_BF_CNT), 'YYYY-MM-DD')							/* YYYY-MM-DD 형식으로 변환 */
                
                WHEN NOT REGEXP_LIKE(B.CHG_BF_CNT, '[^0-9]') AND LENGTH(B.CHG_BF_CNT) = 10	/* 변경전 내용이 핸드폰번호(중간번호 3자리) 라면 */
                THEN SUBSTR(B.CHG_BF_CNT,1,3) || '-' || SUBSTR(B.CHG_BF_CNT,4,3) || '-' || SUBSTR(B.CHG_BF_CNT,7) /* 000-000-0000 으로 변환 */
                
                WHEN NOT REGEXP_LIKE(B.CHG_BF_CNT, '[^0-9]') AND LENGTH(B.CHG_BF_CNT) = 11	/* 변경전 내용이 핸드폰번호(중간번호 4자리) 라면 */
                THEN SUBSTR(B.CHG_BF_CNT,1,3) || '-' || SUBSTR(B.CHG_BF_CNT,4,4) || '-' || SUBSTR(B.CHG_BF_CNT,8) /* 000-0000-0000 으로 변환 */
                
                ELSE NVL(B.CHG_BF_CNT, '-') 												/* 그 외에는 NULL이면 -, NULL이 아니면 내용을 그대로 출력한다 */
                END AS CHG_BF_CNT                                     						/* 변경 전 내용 끝 */
                
         , CASE WHEN B.CHG_AFT_CNT = '10' AND B.CHG_CD ='POC_CD' THEN '학생'   				/* 변경 후 내용 시작 */
                WHEN B.CHG_AFT_CNT = '20' AND B.CHG_CD ='POC_CD' THEN '회사원'					
                WHEN B.CHG_AFT_CNT = '30' AND B.CHG_CD ='POC_CD' THEN '공무원'				/* 변경코드가 POC_CD(직업코드)이고 */
                WHEN B.CHG_AFT_CNT = '40' AND B.CHG_CD ='POC_CD' THEN '전문직'				/* 값이 10이면 학생, 20이면 회사원, 30이면 공무원 */
                WHEN B.CHG_AFT_CNT = '50' AND B.CHG_CD ='POC_CD' THEN '군인'					/* 값이 40이면 전문직, 50이면 군인, 60이면 주부 */
                WHEN B.CHG_AFT_CNT = '60' AND B.CHG_CD ='POC_CD' THEN '주부'					/* 값이 90이면 연예인, 99면 기타 */
                WHEN B.CHG_AFT_CNT = '90' AND B.CHG_CD ='POC_CD' THEN '연예인'
                WHEN B.CHG_AFT_CNT = '99' AND B.CHG_CD ='POC_CD' THEN '기타'
                
                WHEN B.CHG_AFT_CNT = 'H' AND B.CHG_CD ='PSMT_GRC_CD' THEN '자택'				/* 변경코드가 PSMT_GRC_CD(우편물수령코드)이고 */
                WHEN B.CHG_AFT_CNT = 'O' AND B.CHG_CD ='PSMT_GRC_CD' THEN '직장'				/* 값이 H면 자택, O면 직장 */
                
                WHEN B.CHG_AFT_CNT = '10' AND B.CHG_CD ='CUST_SS_CD' THEN '정상'				/* 변경코드가 CUST_SS_CD(고객상태코드)이고 */
                WHEN B.CHG_AFT_CNT = '80' AND B.CHG_CD ='CUST_SS_CD' THEN '중지'				/* 값이 10이면 정상, 80이면 중지, 90이면 해지 */
                WHEN B.CHG_AFT_CNT = '90' AND B.CHG_CD ='CUST_SS_CD' THEN '해지'
                
                WHEN B.CHG_AFT_CNT = 'M' AND B.CHG_CD ='SEX_CD' THEN '남자'					/* 변경코드가 SEX_CD(성별코드)이고 */
                WHEN B.CHG_AFT_CNT = 'F' AND B.CHG_CD ='SEX_CD' THEN '여자'					/* 값이 M이면 남자, F면 여자 */
                
                WHEN B.CHG_AFT_CNT = '0' AND B.CHG_CD ='SCAL_YN' THEN '양력'					/* 변경코드가 SCAL_YN(양음력구분)이고 */
                WHEN B.CHG_AFT_CNT = '1' AND B.CHG_CD ='SCAL_YN' THEN '음력'					/* 값이 0이면 양력, 1이면 음력 */
                
                WHEN B.CHG_AFT_CNT = 'Y' AND B.CHG_CD ='EMAIL_RCV_YN' THEN '동의'				/* 변경코드가 EMAIL_RCV_YN(이메일수신동의여부)이고 */
                WHEN B.CHG_AFT_CNT = 'N' AND B.CHG_CD ='EMAIL_RCV_YN' THEN '미동의'			/* 값이 Y면 동의, N이면 미동의 */
                
                WHEN B.CHG_AFT_CNT = 'Y' AND B.CHG_CD ='DM_RCV_YN' THEN '동의'				/* 변경코드가 DM_RCV_YN(DM수신동의여부)이고 */
                WHEN B.CHG_AFT_CNT = 'N' AND B.CHG_CD ='DM_RCV_YN' THEN '미동의'				/* 값이 Y면 동의, N이면 미동의 */
                
                WHEN B.CHG_AFT_CNT = 'Y' AND B.CHG_CD ='SMS_RCV_YN' THEN '동의'				/* 변경코드가 SMS_RCV_YN(SMS수신동의여부)이고 */
                WHEN B.CHG_AFT_CNT = 'N' AND B.CHG_CD ='SMS_RCV_YN' THEN '미동의'				/* 값이 Y면 동의, N이면 미동의 */
                
                WHEN B.CHG_AFT_CNT = 'Y' AND B.CHG_CD ='TM_RCV_YN' THEN '동의'				/* 변경코드가 TM_RCV_YN(TM수신동의여부)이고 */
                WHEN B.CHG_AFT_CNT = 'N' AND B.CHG_CD ='TM_RCV_YN' THEN '미동의'				/* 값이 Y면 동의, N이면 미동의 */
                
                WHEN NOT REGEXP_LIKE(B.CHG_AFT_CNT, '[^0-9]') AND LENGTH(B.CHG_AFT_CNT) = 8	/* 변경후 내용이 날짜라면(8자리로 이루어진 숫자) */
                THEN TO_CHAR(TO_DATE(B.CHG_AFT_CNT), 'YYYY-MM-DD')							/* YYYY-MM-DD 형식으로 변환 */
                
                WHEN NOT REGEXP_LIKE(B.CHG_AFT_CNT, '[^0-9]') AND LENGTH(B.CHG_AFT_CNT) = 10	/* 변경후 내용이 핸드폰번호(중간번호 3자리) 라면 */
                THEN SUBSTR(B.CHG_AFT_CNT,1,3) || '-' || SUBSTR(B.CHG_AFT_CNT,4,3) || '-' || SUBSTR(B.CHG_AFT_CNT,7) /* 000-000-0000 으로 변환 */
                
                WHEN NOT REGEXP_LIKE(B.CHG_AFT_CNT, '[^0-9]') AND LENGTH(B.CHG_AFT_CNT) = 11	/* 변경후 내용이 핸드폰번호(중간번호 4자리) 라면 */
                THEN SUBSTR(B.CHG_AFT_CNT,1,3) || '-' || SUBSTR(B.CHG_AFT_CNT,4,4) || '-' || SUBSTR(B.CHG_AFT_CNT,8) /* 000-0000-0000 으로 변환 */
                
                ELSE NVL(B.CHG_AFT_CNT, '-') 												/* 그 외에는 NULL이면 -, NULL이 아니면 내용을 그대로 출력한다 */
                END AS CHG_AFT_CNT                                     						/* 변경 후 내용 끝 */
	     , B.LST_UPD_ID || '/' ||                                                   		/* 최종수정자 ID / */
	       (SELECT USER_NM FROM MA_USER_MT WHERE USER_ID = B.LST_UPD_ID)            		/* 최종수정자 이름 */
	       AS LST_UPD_ID 
	     , TO_CHAR(B.LST_UPD_DT, 'YYYY-MM-DD HH24:MI:SS') AS LST_UPD_DT             		/* 최종수정일시 */
	FROM CS_CUST01_MT A INNER JOIN SD_CUST01_HT B                                   		/* 고객관리 테이블과 고객이력 테이블을 INNER JOIN */
	ON A.CUST_NO = B.CUST_NO                                                        		/* 고객번호가 같은 항목들에 대해 */
	WHERE A.CUST_NO = #{SEARCHWORD}                                                 		/* 고객번호가 일치하는 것들만 */
	ORDER BY CHG_DT DESC                                                            		/* 변경일자의 내림차순으로 정렬 */
  	</select> 
  	
  	<!-- 매장 월별실적 가져오기 -->
	<resultMap type="HashMap" id="performMap">
 		<result property="PRT_CD" 		column="PRT_CD" 		javaType="String" />
 		<result property="PRT_NM" 		column="PRT_NM" 		javaType="String" />
 		<result property="D01" 			column="D01" 			javaType="String" />
 		<result property="D02" 			column="D02" 			javaType="String" />
 		<result property="D03" 			column="D03" 			javaType="String" />
 		<result property="D04" 			column="D04" 			javaType="String" />
 		<result property="D05" 			column="D05" 			javaType="String" />
 		<result property="D06" 			column="D06" 			javaType="String" />
 		<result property="D07" 			column="D07" 			javaType="String" />
 		<result property="D08" 			column="D08" 			javaType="String" />
 		<result property="D09" 			column="D09" 			javaType="String" />
 		<result property="D10" 			column="D10" 			javaType="String" />
 		<result property="D11" 			column="D11" 			javaType="String" />
 		<result property="D12" 			column="D12" 			javaType="String" />
 		<result property="D13" 			column="D13" 			javaType="String" />
 		<result property="D14" 			column="D14" 			javaType="String" />
 		<result property="D15" 			column="D15" 			javaType="String" />
 		<result property="D16" 			column="D16" 			javaType="String" />
 		<result property="D17" 			column="D17" 			javaType="String" />
 		<result property="D18" 			column="D18" 			javaType="String" />
 		<result property="D19" 			column="D19" 			javaType="String" />
 		<result property="D20" 			column="D20" 			javaType="String" />
 		<result property="D21" 			column="D21" 			javaType="String" />
 		<result property="D22" 			column="D22" 			javaType="String" />
 		<result property="D23" 			column="D23" 			javaType="String" />
 		<result property="D24" 			column="D24" 			javaType="String" />
 		<result property="D25" 			column="D25" 			javaType="String" />
 		<result property="D26" 			column="D26" 			javaType="String" />
 		<result property="D27" 			column="D27" 			javaType="String" />
 		<result property="D28" 			column="D28" 			javaType="String" />
 		<result property="D29" 			column="D29" 			javaType="String" />
 		<result property="D30" 			column="D30" 			javaType="String" />
 		<result property="D31" 			column="D31" 			javaType="String" />
 		<result property="SUM" 			column="SUM" 			javaType="String" />
 	</resultMap>
 	<select id="getPerformanceList" parameterType="HashMap" resultMap="performMap">
 	/*
 		1. 이 쿼리문은 크게 WITH WS절과 VIEW V절의 INNER JOIN으로 이루어져 있으며 조인조건은 매장코드의 일치이다.
 		2. WITH WS절의 목적은 매장별 1개월동안 실제로 판매되어진 수량을 구해오는 SUM 컬럼을 생성하기 위해서이다.
 			2-1. WS절은 VIEW S절을 포함하고 있으며, S절은 판매구분코드를 통해 구매와 반품을 구분한 컬럼을 생성(TOT_SAL_TP_QTY)하여
 				 WS절에서 매장코드별로(GROUP BY) 실제 판매합계를 구해온다.
 		3. VIEW V절의 목적은 매장별로 각 일자마다 실제로 판매되어진 수량을 구해오는 컬럼들을 생성하기 위해서이다.
 			3-1. V절은 판매, 반품을 구분하기 위한 WITH W1절을 통해 
 					  일별 판매,반품의 합을 알아오기 위한 WITH W2절을 생성하고
 					  W2의 실판매수량의 합을 이용한 PIVOT을 일자별로 실시한다. 
 		4. 파라미터는 총 2개가 들어간다. 
 		   - 파라미터 SAL_DT 는 해당년도와 월을 포함하고 있어, W1절의 일자를 조회하는데 있어 해당년도와 월을 선택하는 조건으로 사용된다.
 		   - 파라미터 PRT_CD_NM 은 매장명을 포함하고 있어, 최종적으로 어떤 매장을 조회할 것인지에 대한 조건으로 사용된다.
 	*/
 	
	WITH WS AS                                                                      /* 합계를 삽입하기 위한 WITH WS절(최종) */
	(
	    SELECT S.PRT_CD AS PRT_CD                                                   /* JOIN을 위한 매장코드 */
	         , SUM(S.TOT_SAL_TP_QTY) AS SUM                                         /* 반품, 판매를 구분한 수량의 합계 */
	    FROM
	    (
	        SELECT PRT_CD                                           
	             , SAL_DT
	             , SAL_NO   
	             , SAL_TP_CD
	             , CASE SAL_TP_CD WHEN 'SAL' THEN NVL(TOT_SAL_QTY, 0)               /* 판매구분코드가 판매면 그대로 */
	                              WHEN 'RTN' THEN NVL(TOT_SAL_QTY * (-1), 0)        /* 판매구분코드가 반품이면 -1을 곱해준다(음수) */
	                              END AS TOT_SAL_TP_QTY                             /* 총 판매수량 */
	        FROM CS_SAL01_MT                                                    	/* 고객판매상세 테이블에서 */
	        WHERE TO_CHAR( TO_DATE(SAL_DT), 'YYYY-MM-DD') LIKE #{SAL_DT} || '%'     /* 날짜 파라미터 넣는 곳 */
	        ORDER BY PRT_CD ASC, SAL_DT ASC, SAL_NO ASC
	    ) S                                                                         
	    GROUP BY S.PRT_CD                                                           /* 매장번호별로 묶음 */
	)
	SELECT V.PRT_CD AS PRT_CD                                                       /* 매장코드 */
	     , V.PRT_NM AS PRT_NM                                                    	/* 매장명 */
	     , NVL("01", 0) AS "D01"                                                    /* 1일부터 31일까지 */
	     , NVL("02", 0) AS "D02"
	     , NVL("03", 0) AS "D03"
	     , NVL("04", 0) AS "D04"
	     , NVL("05", 0) AS "D05"
	     , NVL("06", 0) AS "D06"
	     , NVL("07", 0) AS "D07"
	     , NVL("08", 0) AS "D08"
	     , NVL("09", 0) AS "D09"
	     , NVL("10", 0) AS "D10"
	     , NVL("11", 0) AS "D11"
	     , NVL("12", 0) AS "D12"
	     , NVL("13", 0) AS "D13"
	     , NVL("14", 0) AS "D14"
	     , NVL("15", 0) AS "D15"
	     , NVL("16", 0) AS "D16"
	     , NVL("17", 0) AS "D17"
	     , NVL("18", 0) AS "D18"
	     , NVL("19", 0) AS "D19"
	     , NVL("20", 0) AS "D20"
	     , NVL("21", 0) AS "D21"
	     , NVL("22", 0) AS "D22"
	     , NVL("23", 0) AS "D23"
	     , NVL("24", 0) AS "D24"
	     , NVL("25", 0) AS "D25"
	     , NVL("26", 0) AS "D26"
	     , NVL("27", 0) AS "D27"
	     , NVL("28", 0) AS "D28"
	     , NVL("29", 0) AS "D29"
	     , NVL("30", 0) AS "D30"
	     , NVL("31", 0) AS "D31"
	     , WS.SUM AS SUM                                                            /* 합계 */
	FROM 
	(																				/* 컬럼을 표시하기 위한 뷰 V 시작(최종) */
	    WITH W1 AS                                                                  /* 판매, 반품을 구분하기 위한 WITH W1절 */
	    (
	        SELECT PRT_CD															/* 매장명 */
	             , SAL_DT															/* 판매일자 */
	             , SAL_NO															/* 판매번호 */
	             , SAL_TP_CD														/* 판매구분코드(판매, 반품) */
	             , CASE SAL_TP_CD WHEN 'SAL' THEN NVL(TOT_SAL_QTY, 0)				/* 실판매수량 */				
	                              WHEN 'RTN' THEN NVL(TOT_SAL_QTY * (-1), 0)		/* 구분코드가 SAL 이면 현상유지(판매) */
	                              END AS TOT_SAL_TP_QTY								/* 구분코드가 RTN 이면 -를 곱함(반품) */
	        FROM CS_SAL01_MT
	        WHERE TO_CHAR( TO_DATE(SAL_DT), 'YYYY-MM-DD') LIKE #{SAL_DT} || '%'     /* 날짜 파라미터 넣는 곳 */
	        ORDER BY PRT_CD ASC, SAL_DT ASC, SAL_NO ASC
	    ), 
	    W2 AS(                                                                      /* 일별 판매,반품의 합을 알아오기 위한 WITH W2절 */
		    SELECT A.PRT_CD AS PRT_CD												/* 매장번호 */
		         , (SELECT PRT_NM FROM MA_PRT_MT WHERE PRT_CD = A.PRT_CD) AS PRT_NM	/* 매장명 */
		         , SUBSTR(A.SAL_DT, 7,2) AS DAY										/* 일자 */
		         , SUM(B.TOT_SAL_TP_QTY) AS TOT_SAL_TP_QTY							/* 판매, 반품이 적용된 실수령합계 */
		    FROM CS_SAL01_MT A INNER JOIN W1 B
		    ON  A.PRT_CD = B.PRT_CD
		    AND A.SAL_DT = B.SAL_DT
		    AND A.SAL_NO = B.SAL_NO
		    GROUP BY A.PRT_CD, A.SAL_DT
		    ORDER BY PRT_CD ASC
	    )
	    SELECT * FROM W2
	    PIVOT   (                                                                   /* 피벗을 실시 */
	                SUM(TOT_SAL_TP_QTY)                                             /* 총 판매량을 기준 */
	                FOR DAY IN   (                                                  /* 일자별로 판매량을 구분 */
	                                    '01' AS "01",
	                                    '02' AS "02",
	                                    '03' AS "03",
	                                    '04' AS "04",
	                                    '05' AS "05",
	                                    '06' AS "06",
	                                    '07' AS "07",
	                                    '08' AS "08",
	                                    '09' AS "09",
	                                    '10' AS "10",
	                                    '11' AS "11",
	                                    '12' AS "12",
	                                    '13' AS "13",
	                                    '14' AS "14",
	                                    '15' AS "15",
	                                    '16' AS "16",
	                                    '17' AS "17",
	                                    '18' AS "18",
	                                    '19' AS "19",
	                                    '20' AS "20",
	                                    '21' AS "21",
	                                    '22' AS "22",
	                                    '23' AS "23",
	                                    '24' AS "24",
	                                    '25' AS "25",
	                                    '22' AS "26",
	                                    '23' AS "27",
	                                    '24' AS "28",
	                                    '25' AS "29",
	                                    '30' AS "30",
	                                    '31' AS "31"
	                                )
	                
	            )
	    ORDER BY PRT_CD ASC											
	) V INNER JOIN WS																	/* 뷰 V 끝 */	
	ON V.PRT_CD = WS.PRT_CD																/* WITH WS절과 INNER JOIN(매장코드가 같은 것에 대해) */
	<if test=' SE_USER_DT_CD = "2" '>													/* 세션에 저장된 사용자구분코드가 2라면 */
	WHERE V.PRT_NM LIKE '%' || #{PRT_CD_NM} || '%'										/* 매장이름이 부분일치 하는 것 */
 	</if>
 	</select>
 
  	
  	<!-- 검색기능을 위한 동적SQL -->
	<sql id="search">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">AND chg_seq LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'c'.toString()">AND cust_no LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'w'.toString()">AND chg_aft_cnt LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'tc'.toString()">AND ((chg_seq LIKE '%' || #{keyword} || '%' ) or (cust_no LIKE '%' || #{keyword} || '%'))</if>
		</if>
	</sql>

</mapper>