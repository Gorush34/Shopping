<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="shopping">

	<!-- index 화면(임시) -->	
	<resultMap type="HashMap" id="boardList">
		<result property="chg_seq" column="chg_seq" javaType="int" />
		<result property="cust_no" column="cust_no" javaType="String" />
		<result property="chg_aft_cnt" column="chg_aft_cnt" javaType="String" />
	</resultMap>
	
	<select id="getBoardList" resultMap="boardList">
		
		select V.chg_seq, V.cust_no, V.chg_aft_cnt
		from 
		    (
		    select rownum AS rno, chg_seq, cust_no, chg_aft_cnt
		    from SD_CUST01_HT
		    order by chg_seq desc
		    ) V
		where rno between 1 and 5
		
	</select>

	
	<resultMap type="com.spring.shopping.model.ShoppingVO" id="InfoMap">
	    <result property="chg_seq" column="chg_seq" javaType="int" />
		<result property="cust_no" column="cust_no" javaType="String" />
		<result property="chg_aft_cnt" column="chg_aft_cnt" javaType="String" />
  	</resultMap>
  	
  	<!-- 리스트 + 페이징 + 검색 -->
	<select id="getListWithPaging" resultMap="InfoMap" parameterType="com.spring.shopping.common.SearchCriteria">
		select chg_seq, cust_no, chg_aft_cnt
		from
		(
			  SELECT rownum AS rno,
			    chg_seq,
			    cust_no,
			    chg_aft_cnt
			  FROM
			    SD_CUST01_HT 
			  WHERE chg_seq > 0
			    <include refid="search"></include>
			  ORDER BY  
			    chg_seq desc
		) V
		where rno between #{pageStart} and #{endPage}
	</select>
  	
  	<!-- 과제1 시작 -->

  	
	<!-- 로그인 시도를 한 사용자의 정보를 가져오기 -->
	<select id="getLoginMember" parameterType="HashMap" resultType="com.spring.shopping.model.EmpVO">
		SELECT USER_ID                            											/* 사용자ID */
		     , USER_NM                            											/* 사용자명 */
		     , USER_DT_CD                         											/* 사용자구분코드 */
		     , USE_YN                             											/* 사용여부 */
		     , USE_PWD                            											/* 비밀번호 */
		     , ST_DT                              											/* 시작일자 */
		     , NVL(ED_DT, ' ') AS ED_DT           											/* 종료일자 */ 
		     , PRT_CD                             											/* 거래처코드 */
		     , (SELECT PRT_NM FROM MA_PRT_MT B WHERE PRT_CD = A.PRT_CD) AS PRT_NM			/* 거래처명 */
		     , NVL(PWD_UPD_DT, ' ') AS PWD_UPD_DT 											/* 비밀번호변경일자 */
		     , FST_REG_DT                         											/* 최초등록일자 */
		     , FST_USER_ID                        											/* 최초등록자 */
		     , LST_UPD_DT                         											/* 최종수정일자 */
		     , LST_UPD_ID                         											/* 최종수정자 */
		FROM MA_USER_MT A
		WHERE USER_ID = #{USER_ID} AND USE_PWD = #{USE_PWD}
	</select>
  	
  	<resultMap type="HashMap" id="getTotalCountPrtMap">
	   <result property="PRT_CNT" 		column="PRT_CNT" 		javaType="String" />
	</resultMap>
  	
  	
  	<!-- 매장을 조건으로 검색한 결과의 개수 가져오기 -->
  	<select id="getTotalCountPrt" parameterType="HashMap" resultMap="getTotalCountPrtMap">
  	SELECT DISTINCT COUNT(PRT_CD) AS PRT_CNT												/* 중복된 값을 하나로 하는 매장코드의 총 개수를 얻어온다 */
    FROM MA_PRT_MT																			/* 거래처관리 테이블에서 */	 
    WHERE ( 
                UPPER(PRT_CD) LIKE '%' || UPPER(#{searchWord_prt}) || '%'           		/* 매장검색란에 적힌 값과 매장코드가 부분일치 하는 값 */
                OR																			/* 또는 */
                PRT_NM LIKE '%' || #{searchWord_prt} || '%'									/* 매장검색란에 적힌 값과 매장명이 부분일치 하는 값 */	
          )
  	</select>
  	
  	<resultMap type="HashMap" id="getTotalCountCustMap">
    <result property="CUST_CNT" 		column="CUST_CNT" 		javaType="String" />
	</resultMap>
  	
  	
  	<!-- 고객을 조건으로 검색한 결과의 개수 가져오기 -->
  	<select id="getTotalCountCust" parameterType="HashMap" resultMap="getTotalCountCustMap">
  	SELECT COUNT(CUST_NO) AS CUST_CNT														/* 중복된 값을 하나로 하는 고객번호의 총 개수를 얻어온다 */
    FROM CS_CUST01_MT 																		/* 고객관리 테이블에서 */
    WHERE CUST_NO LIKE '%' || #{searchWord_cust} || '%'										/* 고객검색란에 적힌 값과 고객번호가 부분일치 하는 값 */
       OR UPPER(CUST_NM) LIKE '%' || UPPER(#{searchWord_cust}) || '%'						/* 고객검색란에 적힌 값과 고객명이 부분일치 하는 값 */	
  	</select>
  	
  	
  	<!-- 매장검색 결과가 하나인 결과 가져오기 -->
  	<resultMap type="HashMap" id="getResultPrtMap">
	   <result property="PRT_NM" 		column="PRT_NM" 		javaType="String" />
	   <result property="PRT_CD" 		column="PRT_CD" 		javaType="String" />
	</resultMap>

  	<select id="getResultPrt" resultMap="getResultPrtMap" parameterType="HashMap">
		SELECT DISTINCT COUNT(PRT_NM)
		     , PRT_NM                     													/* 매장명 */                              
		     , PRT_CD                     													/* 매장코드 */                                                        
		FROM MA_PRT_MT                                    									/* 거래처관리 테이블에서 */
		WHERE 	( 
					UPPER(PRT_CD) LIKE '%' || UPPER(#{searchWord_prt}) || '%'           	/* 매장검색란에 적힌 값과 매장코드가 부분일치 하는 값 */
					OR																		/* 또는 */
					PRT_NM LIKE '%' || #{searchWord_prt} || '%'								/* 매장검색란에 적힌 값과 매장명이 부분일치 하는 값 */	
				)
		GROUP BY PRT_CD, PRT_NM																/* 매장코드, 매장명 오름차순으로 정렬 */
	</select>
	
	<!-- 고객검색 결과가 하나인 결과 가져오기 -->
  	<resultMap type="HashMap" id="getResultCustMap">
	   <result property="CUST_NO" 		column="CUST_NO" 		javaType="String" />
	   <result property="CUST_NM" 		column="CUST_NM" 		javaType="String" />
	</resultMap>

  	<select id="getResultCust" resultMap="getResultCustMap" parameterType="HashMap">
		SELECT CUST_NO																		/* 고객번호 */
		     , CUST_NM																		/* 고객명 */
		FROM CS_CUST01_MT                                    								/* 고객관리 테이블에서 */	
		WHERE CUST_NO LIKE '%' || #{searchWord_cust} || '%'	                                /* 고객검색란에 적힌 값과 고객번호가 부분일치 하는 값 */
		   OR UPPER(CUST_NM) LIKE '%' || UPPER(#{searchWord_cust}) || '%' 					/* 고객검색란에 적힌 값과 고객명과 부분일치 하는 값 */
		ORDER BY CUST_NO ASC																/* 고객번호 오름차순으로 정렬 */
	</select>
  	
	<!-- 고객조회 목록 가져오기 -->
	<resultMap type="HashMap" id="custListMap">
	   <result property="CUST_NO" 		column="CUST_NO" 		javaType="String" />
	   <result property="CUST_NM" 		column="CUST_NM" 		javaType="String" />
	   <result property="MBL_NO" 		column="MBL_NO" 		javaType="String" />
	   <result property="CUST_SS_CD" 	column="CUST_SS_CD" 	javaType="String" />
	   <result property="JS_DT" 		column="JS_DT" 			javaType="String" />
	   <result property="PRT_NM" 		column="PRT_NM" 		javaType="String" />
	   <result property="USER_NM" 		column="USER_NM" 		javaType="String" />
	   <result property="LST_UPD_DT" 	column="LST_UPD_DT" 	javaType="String" />
	</resultMap>
	<select id="getCustList" resultMap="custListMap" parameterType="HashMap">
		SELECT A.CUST_NO AS CUST_NO                                                         /* 고객번호 */
		     , CASE WHEN LENGTH(A.CUST_NM) = 2 THEN SUBSTR(A.CUST_NM, 1, 1) || '*'          /* 고객명 */
		       ELSE                                                                         /* 2글자면 마지막 글자만 */
		       SUBSTR(A.CUST_NM, 1, 1) ||                                                   /* 3글자이상시 첫,마지막을 제외한 */
		       LPAD('*', LENGTH(A.CUST_NM)-2, '*') ||                                       /* 중간부분을 마스킹처리 */
		       SUBSTR(A.CUST_NM, LENGTH(A.CUST_NM), 1)  END AS CUST_NM    
		     , SUBSTR(A.MBL_NO,1,3) || '-' ||                                               /* 휴대폰번호 */    
		       LPAD('*', LENGTH(A.MBL_NO)-7, '*') || '-' ||                                 /* 중간 번호를 마스킹 처리 */
		       SUBSTR(A.MBL_NO, -4) AS MBL_NO                                                
		     , CASE A.CUST_SS_CD                                                            /* 고객상태코드 */
		       WHEN '10' THEN '정상'                                                         /* 코드가 10이면 정상 */
		       WHEN '80' THEN '중지'                                                         /* 코드가 80이면 중지 */
		       WHEN '90' THEN '해지'                                                         /* 코드가 90이면 해지 */
		       END AS CUST_SS_CD    
		     , TO_CHAR(TO_DATE(A.JS_DT), 'YYYY-MM-DD') AS JS_DT                             /* 가입일자 */
		     , B.PRT_NM AS PRT_NM                                                           /* 가입매장 */
		     , A.FST_USER_ID || '/' || C.USER_NM AS USER_NM  								/* 등록자 아이디 / 등록자 */
		     , TO_CHAR(A.LST_UPD_DT, 'YYYY-MM-DD HH24MISS') AS LST_UPD_DT        			/* 수정일자 */
		FROM CS_CUST01_MT A INNER JOIN MA_PRT_MT B                                          /* 고객관리테이블과 거래처관리 테이블 JOIN */
		ON A.JN_PRT_CD = B.PRT_CD                                                           /* 가입매장코드 = 거래처코드 */
		INNER JOIN MA_USER_MT C                                                             /* 고객관리테이블과 사용자 테이블 JOIN */
		ON A.FST_USER_ID = C.USER_ID                                                        /* 등록자아이디 = 사용자아이디 */
		WHERE 1=1
		AND 	(
					TO_DATE(A.JS_DT, 'YYYY-MM-DD') <![CDATA[>=]]> TO_DATE(#{SDATE}, 'YYYY-MM-DD')	/* 가입일자가 시작일자와 */
                    AND 	
                	TO_DATE(A.JS_DT, 'YYYY-MM-DD') <![CDATA[<=]]> TO_DATE(#{EDATE}, 'YYYY-MM-DD')   /* 종료일자 사이 */
				)	
		<if test='JN_PRT_CD != "" '>                                  						/* 매장검색란이 공백이 아니라면(검색조건) */
		AND UPPER(A.JN_PRT_CD) LIKE '%' || UPPER(#{JN_PRT_CD}) || '%'           			/* 매장코드란에 적힌 값과 매장코드가 일치 하는 값 */
		</if>
		<if test='CUST_NO != ""'>                                                        	/* 고객번호가 기본값이 아니라면 */
		AND A.CUST_NO = #{CUST_NO} 															/* 고객번호란에 적힌 값과 고객번호가 일치 하는 값 */
		</if>
		<if test='CUST_SS_CD != ""'>                                                        /* 고객상태코드가 기본값이 아니라면 */
		AND A.CUST_SS_CD = #{CUST_SS_CD}                                                    /* 고객상태코드가 일치하는 값 */
		</if>
		ORDER BY CUST_NO																	/* 고객번호의 오름차순으로 정렬 */
	</select>
	
	<!-- 매장조회 목록 가져오기(팝업) -->
	<resultMap type="HashMap" id="prtListMap">
	   <result property="PRT_CD" 		column="PRT_CD" 		javaType="String" />
	   <result property="PRT_NM" 		column="PRT_NM" 		javaType="String" />
	   <result property="PRT_DT_CD" 	column="PRT_DT_CD" 		javaType="String" />
	   <result property="PRT_SS_CD" 	column="PRT_SS_CD" 		javaType="String" />
	</resultMap>
	<select id="getPrtList" resultMap="prtListMap" parameterType="HashMap">
  	SELECT PRT_CD                                   									/* 거래처코드 */
	     , PRT_NM                                   									/* 거래처명 */
	     , PRT_DT_CD                                									/* 거래처구분코드 */
	     , CASE PRT_SS_CD                           									/* 거래처상태코드 */
	       WHEN '10' THEN '정상'                     									/* 코드가 10이면 정상 */
	       WHEN '80' THEN '중지'                     									/* 코드가 80이면 중지 */
	       WHEN '90' THEN '폐쇄'                     									/* 코드가 90이면 폐쇄 */
	       END AS PRT_SS_CD
	FROM MA_PRT_MT                                  									/* 거래처관리 테이블로부터 */
	WHERE PRT_DT_CD = '2'                           									/* 거래처구분코드가 2이면서 */
	  AND ( UPPER(PRT_CD) LIKE '%' || UPPER(#{searchWord}) || '%'             			/* 매장코드와 부분일치하거나 */
	   OR   PRT_NM LIKE '%' || #{searchWord} || '%' )           						/* 또는 매장코드와 부분일치한 데이터들을 */
	ORDER BY PRT_CD ASC                             									/* 거래처코드의 오름차순을 기준으로 가져온다 */
  	</select>

	<!-- 고객조회 목록 가져오기(팝업) -->
	<resultMap type="HashMap" id="popUpListMap">
	   <result property="CUST_NO" 		column="CUST_NO" 		javaType="String" />
	   <result property="CUST_NM" 		column="CUST_NM" 		javaType="String" />
	   <result property="MBL_NO" 		column="MBL_NO" 		javaType="String" />
	   <result property="CUST_SS_CD" 	column="CUST_SS_CD" 	javaType="String" />
	</resultMap>
	
	<select id="getPopUpCustList" resultMap="popUpListMap" parameterType="HashMap">
  	SELECT CUST_NO                                               							/* 고객번호 */
	     , CUST_NM                                               							/* 고객명 */
	     , SUBSTR(MBL_NO, 1, 3) || '-' ||
	       SUBSTR(MBL_NO, 4, LENGTH(MBL_NO)-7 ) || '-' ||
	       SUBSTR(MBL_NO, -4) AS MBL_NO                          							/* 휴대폰 번호(-로연결) */
	     , CASE CUST_SS_CD                                       							/* 고객상태코드 */
	       WHEN '10' THEN '정상'                                  							/* 코드가 10이면 정상 */
	       WHEN '80' THEN '중지'                                  							/* 코드가 80이면 중지 */
	       WHEN '90' THEN '해지'                                  							/* 코드가 90이면 해지 */
	       END AS CUST_SS_CD
	FROM CS_CUST01_MT                                           							/* 고객관리 테이블로부터 */
	WHERE 1=1
	<if test=" SEARCHWORD_NM != '' ">														/* 고객이름 입력칸이 비어있지 않으면(팝업검색조건) */
	AND   UPPER(CUST_NM) LIKE '%' || UPPER(#{SEARCHWORD_NM}) || '%'          				/* 고객번호가 일부포함되거나 */
	</if>
		<if test=' SEARCHWORD_MBL != "" '>	   												/* 핸드폰번호 입력칸이 비어있지 않으면(팝업검색조건) */
	AND    MBL_NO = #{SEARCHWORD_MBL}							 							/* 핸드폰번호가 일치하면 */
	</if>
	<if test=' CUST_NO != "" '>																/* 고객번호 입력칸이 비어있지 않으면(부모창검색조건) */
	AND ( 	
			CUST_NO LIKE '%' || #{CUST_NO} || '%'											/* 고객검색란에 적힌 값과 고객번호가 부분일치 하는 값 */
			OR 	  
			UPPER(CUST_NM) LIKE '%' || UPPER(#{CUST_NO}) || '%'								/* 고객검색란에 적힌 값과 고객명이 부분일치 하는 값 */
		)
	</if>

	ORDER BY CUST_NO ASC																	/* 고객번호의 오름차순으로 정렬 */
  	</select>  	


	<!-- 고객의 정보 가져오기(팝업) -->
	<resultMap type="HashMap" id="custInfoMap">
	   <result property="CUST_NO" 		column="CUST_NO" 		javaType="String" />
	   <result property="CUST_NM" 		column="CUST_NM" 		javaType="String" />
	</resultMap>
	
	<select id="getCustInfoPopUp" resultMap="custInfoMap" parameterType="HashMap">
	SELECT CUST_NO                                                     						/* 고객번호 */
	     , CUST_NM                                                     						/* 고객명 */ 
	FROM CS_CUST01_MT                                            							/* 고객관리 테이블에서 */
	WHERE CUST_NO = #{SEARCHWORD}                                             				/* 고객번호가 일치하는 것만 */
	</select>
	

	<!-- 고객조회 목록 가져오기 -->
	<resultMap type="HashMap" id="hisListMap">
	   <result property="CHG_DT" 		column="CHG_DT" 		javaType="String" />
	   <result property="CHG_CD" 		column="CHG_CD" 		javaType="String" />
	   <result property="CHG_BF_CNT" 	column="CHG_BF_CNT" 	javaType="String" />
	   <result property="CHG_AFT_CNT" 	column="CHG_AFT_CNT" 	javaType="String" />
	   <result property="LST_UPD_ID" 	column="LST_UPD_ID" 	javaType="String" />
	   <result property="LST_UPD_DT" 	column="LST_UPD_DT" 	javaType="String" />
	</resultMap>
	
	<select id="getPopUpHistoryList" resultMap="hisListMap" parameterType="HashMap">
	SELECT B.CUST_NO AS CUST_NO                                                     		/* 고객번호 */
	     , B.CUST_NM AS CUST_NM                                                     		/* 고객명 */ 
	     , TO_CHAR(TO_DATE(A.CHG_DT), 'YYYY-MM-DD') AS CHG_DT                       		/* 변경일자 */
	     , CASE WHEN A.CHG_CD = CMT.CODE_CD THEN NVL(CMT.CODE_NM, '-') ELSE NVL(A.CHG_CD, '-') END AS CHG_CD
	     , CASE WHEN A.CHG_CD = BDT.CODE_CD THEN BDT.DTL_CD_NM 
	            WHEN A.CHG_CD = 'JN_PRT_CD' THEN ( SELECT P.PRT_NM FROM MA_PRT_MT P WHERE P.PRT_CD = A.CHG_BF_CNT )
	            ELSE 
	                    CASE WHEN A.CHG_CD LIKE '%' || '_DT' AND NOT REGEXP_LIKE(A.CHG_BF_CNT, '[^0-9]') THEN TO_CHAR(TO_DATE(A.CHG_BF_CNT), 'YYYY-MM-DD')   /* 일자가 입력된 곳은 YYYY-MM-DD형식으로 변경 */
	                         WHEN A.CHG_CD = 'MBL_NO' AND LENGTH(A.CHG_BF_CNT) = 10 THEN SUBSTR(A.CHG_BF_CNT,1,3) || '-' || SUBSTR(A.CHG_BF_CNT,4,3) || '-' || SUBSTR(A.CHG_BF_CNT,7) /* 데이터에 숫자가 아닌 것이 하나라도 포함되면 제외: 숫자 */
	                         WHEN A.CHG_CD = 'MBL_NO' AND LENGTH(A.CHG_BF_CNT) = 11 THEN SUBSTR(A.CHG_BF_CNT,1,3) || '-' || SUBSTR(A.CHG_BF_CNT,4,4) || '-' || SUBSTR(A.CHG_BF_CNT,8) /* 중간자리 양옆에 - 추가 */
	                         ELSE NVL(A.CHG_BF_CNT, '-') END   /* NULL인 것은 '-'로 대체하고 그 외엔 내용 그대로 표시 */
            	END AS CHG_BF_CNT
     	 , CASE WHEN A.CHG_CD = ADT.CODE_CD THEN ADT.DTL_CD_NM 
	            WHEN A.CHG_CD = 'JN_PRT_CD' THEN ( SELECT P.PRT_NM FROM MA_PRT_MT P WHERE P.PRT_CD = A.CHG_AFT_CNT )
	            ELSE 
	                    CASE WHEN A.CHG_CD LIKE '%' || '_DT' AND NOT REGEXP_LIKE(A.CHG_AFT_CNT, '[^0-9]') THEN TO_CHAR(TO_DATE(A.CHG_AFT_CNT), 'YYYY-MM-DD')   /* 일자가 입력된 곳은 YYYY-MM-DD형식으로 변경 */
	                         WHEN A.CHG_CD = 'MBL_NO' AND LENGTH(A.CHG_AFT_CNT) = 10 THEN SUBSTR(A.CHG_AFT_CNT,1,3) || '-' || SUBSTR(A.CHG_AFT_CNT,4,3) || '-' || SUBSTR(A.CHG_AFT_CNT,7) /* 데이터에 숫자가 아닌 것이 하나라도 포함되면 제외: 숫자 */
	                         WHEN A.CHG_CD = 'MBL_NO' AND LENGTH(A.CHG_AFT_CNT) = 11 THEN SUBSTR(A.CHG_AFT_CNT,1,3) || '-' || SUBSTR(A.CHG_AFT_CNT,4,4) || '-' || SUBSTR(A.CHG_AFT_CNT,8) /* 중간자리 양옆에 - 추가 */
	                         ELSE NVL(A.CHG_AFT_CNT, '-') END   /* NULL인 것은 '-'로 대체하고 그 외엔 내용 그대로 표시 */
                END AS CHG_AFT_CNT
	     , A.LST_UPD_ID || '/' ||                                                   		/* 최종수정자 ID / */
		       (SELECT USER_NM FROM MA_USER_MT WHERE USER_ID = A.LST_UPD_ID) AS LST_UPD_ID  /* 최종수정자 이름 */
		 , TO_CHAR(A.LST_UPD_DT, 'YYYY-MM-DD HH24MISS') AS LST_UPD_DT             			/* 최종수정일시 */
	FROM SD_CUST01_HT A INNER JOIN CS_CUST01_MT B ON A.CUST_NO = B.CUST_NO                  /* 고객관리 테이블과 고객이력 테이블을 INNER JOIN  고객번호가 같은 항목들에 대해 */
	JOIN MA_CODE_MT CMT ON A.CHG_CD = CMT.CODE_CD
	LEFT OUTER JOIN MA_CODE_DT BDT ON A.CHG_CD = BDT.CODE_CD AND A.CHG_BF_CNT = BDT.DTL_CD
	LEFT OUTER JOIN MA_CODE_DT ADT ON A.CHG_CD = ADT.CODE_CD AND A.CHG_AFT_CNT = ADT.DTL_CD
	WHERE B.CUST_NO = #{SEARCHWORD}                                                 		/* 고객번호가 일치하는 것들만 */
	ORDER BY A.CHG_DT DESC, A.LST_UPD_DT DESC                                               /* 변경일자의 내림차순, 최종수정일시 내림차순으로 정렬 */
  	</select> 
  	
  	<!-- 매장 월별실적 가져오기 -->
	<resultMap type="HashMap" id="performMap">
 		<result property="PRT_CD" 		column="PRT_CD" 		javaType="String" />
 		<result property="PRT_NM" 		column="PRT_NM" 		javaType="String" />
 		<result property="D01" 			column="D01" 			javaType="String" />
 		<result property="D02" 			column="D02" 			javaType="String" />
 		<result property="D03" 			column="D03" 			javaType="String" />
 		<result property="D04" 			column="D04" 			javaType="String" />
 		<result property="D05" 			column="D05" 			javaType="String" />
 		<result property="D06" 			column="D06" 			javaType="String" />
 		<result property="D07" 			column="D07" 			javaType="String" />
 		<result property="D08" 			column="D08" 			javaType="String" />
 		<result property="D09" 			column="D09" 			javaType="String" />
 		<result property="D10" 			column="D10" 			javaType="String" />
 		<result property="D11" 			column="D11" 			javaType="String" />
 		<result property="D12" 			column="D12" 			javaType="String" />
 		<result property="D13" 			column="D13" 			javaType="String" />
 		<result property="D14" 			column="D14" 			javaType="String" />
 		<result property="D15" 			column="D15" 			javaType="String" />
 		<result property="D16" 			column="D16" 			javaType="String" />
 		<result property="D17" 			column="D17" 			javaType="String" />
 		<result property="D18" 			column="D18" 			javaType="String" />
 		<result property="D19" 			column="D19" 			javaType="String" />
 		<result property="D20" 			column="D20" 			javaType="String" />
 		<result property="D21" 			column="D21" 			javaType="String" />
 		<result property="D22" 			column="D22" 			javaType="String" />
 		<result property="D23" 			column="D23" 			javaType="String" />
 		<result property="D24" 			column="D24" 			javaType="String" />
 		<result property="D25" 			column="D25" 			javaType="String" />
 		<result property="D26" 			column="D26" 			javaType="String" />
 		<result property="D27" 			column="D27" 			javaType="String" />
 		<result property="D28" 			column="D28" 			javaType="String" />
 		<result property="D29" 			column="D29" 			javaType="String" />
 		<result property="D30" 			column="D30" 			javaType="String" />
 		<result property="D31" 			column="D31" 			javaType="String" />
 		<result property="SUM" 			column="SUM" 			javaType="String" />
 	</resultMap>
 	<select id="getPerformanceList" parameterType="HashMap" resultMap="performMap">
	WITH TMP AS (																		/* 매장별 일 판매실적을 알아오기 위한 TMP */
			        SELECT A.PRT_CD AS PRT_CD											/* 매장코드 */
			             , B.PRT_NM AS PRT_NM											/* 매장명 */
			             , SUBSTR(A.SAL_DT, 7, 2) AS DD 								/* 일자 */
			             , SUM(CASE WHEN A.SAL_TP_CD = 'SAL' THEN A.TOT_SAL_QTY ELSE A.TOT_SAL_QTY*-1 END) AS TOT_SAL_QTY /* 판매수량 */
			        FROM CS_SAL01_MT A													/* 고객판매테이블 */
			        JOIN MA_PRT_MT B ON A.PRT_CD = B.PRT_CD								/* 거래처관리 테이블 INNER JOIN (조건 : 매장코드일치) */	
			        WHERE 1=1												
			        AND TO_CHAR( TO_DATE(A.SAL_DT), 'YYYY-MM-DD') LIKE #{SAL_DT} || '%' /* 특정 월에 대해서만 */
			        GROUP BY A.PRT_CD, B.PRT_NM, A.SAL_DT, SUBSTR(SAL_DT, 7, 2)			
	)
	SELECT PRT_CD
	     , PRT_NM
	     , SUM(D01) AS D01, SUM(D02) AS D02, SUM(D03) AS D03, SUM(D04) AS D04, SUM(D05) AS D05, SUM(D06) AS D06, SUM(D07) AS D07, SUM(D08) AS D08, SUM(D09) AS D09, SUM(D10) AS D10
	     , SUM(D11) AS D11, SUM(D12) AS D12, SUM(D13) AS D13, SUM(D14) AS D14, SUM(D15) AS D15, SUM(D16) AS D16, SUM(D17) AS D17, SUM(D18) AS D18, SUM(D19) AS D19, SUM(D20) AS D20
	     , SUM(D21) AS D21, SUM(D22) AS D22, SUM(D23) AS D23, SUM(D24) AS D24, SUM(D25) AS D25, SUM(D26) AS D26, SUM(D27) AS D27, SUM(D28) AS D28, SUM(D29) AS D29, SUM(D30) AS D30, SUM(D31) AS D31
	     , SUM(TOT) AS SUM
	 FROM (
	        SELECT PRT_CD
	             , PRT_NM
	             , NVL(D01, 0) AS D01, NVL(D02, 0) AS D02, NVL(D03, 0) AS D03, NVL(D04, 0) AS D04, NVL(D05, 0) AS D05, NVL(D06, 0) AS D06, NVL(D07, 0) AS D07, NVL(D08, 0) AS D08, NVL(D09, 0) AS D09, NVL(D10, 0) AS D10
	             , NVL(D11, 0) AS D11, NVL(D12, 0) AS D12, NVL(D13, 0) AS D13, NVL(D14, 0) AS D14, NVL(D15, 0) AS D15, NVL(D16, 0) AS D16, NVL(D17, 0) AS D17, NVL(D18, 0) AS D18, NVL(D19, 0) AS D19, NVL(D20, 0) AS D20
	             , NVL(D21, 0) AS D21, NVL(D22, 0) AS D22, NVL(D23, 0) AS D23, NVL(D24, 0) AS D24, NVL(D25, 0) AS D25, NVL(D26, 0) AS D26, NVL(D27, 0) AS D27, NVL(D28, 0) AS D28, NVL(D29, 0) AS D29, NVL(D30, 0) AS D30, NVL(D31, 0) AS D31
	             , (NVL(D01, 0) + NVL(D02, 0) + NVL(D03, 0) + NVL(D04, 0) + NVL(D05, 0) + NVL(D06, 0) + NVL(D07, 0) + NVL(D08, 0) + NVL(D09, 0) + NVL(D10, 0)
	              + NVL(D11, 0) + NVL(D12, 0) + NVL(D13, 0) + NVL(D14, 0) + NVL(D15, 0) + NVL(D16, 0) + NVL(D17, 0) + NVL(D18, 0) + NVL(D19, 0) + NVL(D20, 0)
	              + NVL(D21, 0) + NVL(D22, 0) + NVL(D23, 0) + NVL(D24, 0) + NVL(D25, 0) + NVL(D26, 0) + NVL(D27, 0) + NVL(D28, 0) + NVL(D29, 0) + NVL(D30, 0) + NVL(D31, 0)) AS TOT 
	         FROM TMP
	        PIVOT (SUM(TOT_SAL_QTY)	 /* 일자별 합계를 나타내기 위한 PIVOT */
	               FOR DD IN ('01' AS D01, '02' AS D02, '03' AS D03, '04' AS D04, '05' AS D05, '06' AS D06, '07' AS D07, '08' AS D08, '09' AS D09, '10' AS D10
	                         , '11' AS D11, '12' AS D12, '13' AS D13, '14' AS D14, '15' AS D15, '16' AS D16, '17' AS D17, '18' AS D18, '19' AS D19, '20' AS D20
	                         , '21' AS D21, '22' AS D22, '23' AS D23, '24' AS D24, '25' AS D25, '26' AS D26, '27' AS D27, '28' AS D28, '29' AS D29, '30' AS D30, '31' AS D31))
	)
	WHERE 1=1
	<if test='JN_PRT_CD != "" '>														
	AND PRT_CD = #{JN_PRT_CD} 	/* 매장이름이 일치 하는 것 */
 	</if>
	GROUP BY PRT_CD, PRT_NM		/* 매장별로 GROUP */
 	</select>
 
 
 	<!-- 고객상태 목록을 불러오기 -->
 	<resultMap type="HashMap" id="CustSSMap">
	   <result property="DTL_CD" 		column="DTL_CD" 		javaType="String" />
	   <result property="DTL_CD_NM" 	column="DTL_CD_NM" 		javaType="String" />
	</resultMap>
 	
 	<select id="getCustStatusList" resultMap="CustSSMap">
 		SELECT DTL_CD																	/* 세부코드 */
		     , DTL_CD_NM																/* 세부코드명 */
		FROM MA_CODE_DT
		WHERE CODE_CD = 'CUST_SS_CD'													/* 코드가 고객상태인 것 */
		AND USE_YN = 'Y'																/* 사용여부가 사용중인 것 */
 	</select>
 	
 	<!-- 고객정보 조회 -->
 	<select id="readCustInfo" parameterType="String" resultType="com.spring.shopping.model.CustVO">
 		SELECT CUST_NO                                      /* 고객번호 */
		     , CUST_NM                                      /* 고객명 */
		     , SEX_CD                                       /* 성별코드 */
		     , SCAL_YN                                      /* 양음력구분 */
		     , BRDY_DT                                      /* 생년월일 */
		     , NVL(MRRG_DT, ' ') AS MRRG_DT                 /* 결혼기념일 */
		     , POC_CD                                       /* 직업코드 */
		     , MBL_NO                                       /* 휴대폰번호 */
		     , NVL(PSMT_GRC_CD, ' ') AS PSMT_GRC_CD         /* 우편물수령코드 */
		     , NVL(EMAIL, ' ') AS EMAIL                     /* 이메일 */
		     , NVL(ZIP_CD, ' ') AS ZIP_CD                   /* 우편번호코드 */
		     , NVL(ADDR, ' ') AS ADDR                       /* 주소 */
		     , NVL(ADDR_DTL, ' ') AS ADDR_DTL               /* 상세주소 */
		     , CUST_SS_CD                                   /* 고객상태코드 */
		     , NVL(CNCL_CNTS, ' ') AS CNCL_CNTS             /* 해지사유내용 */
		     , JN_PRT_CD                                    /* 가입매장코드 */
		     , (SELECT PRT_NM FROM MA_PRT_MT WHERE PRT_CD = JN_PRT_CD) AS PRT_NM  /* 가입매장명 */
		     , EMAIL_RCV_YN                                 /* 이메일수신동의 */
		     , SMS_RCV_YN                                   /* SMS수신동의 */
		     , DM_RCV_YN                                    /* DM수신동의 */
		     , FST_JS_DT                                    /* 최초가입일자 */
		     , JS_DT                                        /* 가입일자 */
		     , NVL(STP_DT, ' ') AS STP_DT                   /* 중지일자 */
		     , NVL(CNCL_DT, ' ') AS CNCL_DT                 /* 해지일자 */
		     , FST_REG_DT                                   /* 최초등록일자 */
		     , FST_USER_ID                                  /* 최초등록자 */
		     , LST_UPD_DT                                   /* 최종수정일자 */
		     , LST_UPD_ID                                   /* 최종수정자 */
		FROM CS_CUST01_MT 
		WHERE CUST_NO = #{viewCust}
 	</select>
 	
 	<!-- 중복유무를 검사 -->
 	<select id="compareItem" parameterType="HashMap" resultType="String">
 		SELECT COUNT(*)
		FROM CS_CUST01_MT
		WHERE 1=1
		<if test='type != "EMAIL"'>
		AND MBL_NO = #{item}
		</if>
		<if test='type != "MBL"'>
		AND EMAIL = #{item}
 		</if>
 	</select>
  	
  	<!-- 검색기능을 위한 동적SQL -->
	<sql id="search">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">AND chg_seq LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'c'.toString()">AND cust_no LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'w'.toString()">AND chg_aft_cnt LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'tc'.toString()">AND ((chg_seq LIKE '%' || #{keyword} || '%' ) or (cust_no LIKE '%' || #{keyword} || '%'))</if>
		</if>
	</sql>

</mapper>